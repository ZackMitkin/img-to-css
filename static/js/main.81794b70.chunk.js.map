{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["worker","Worker","type","App","useState","imgArr","setImgArr","imageFileUrl","setImageFileUrl","html","setHtml","loading","setLoading","colorDiff","setColorDiff","minLineLength","setMinLineLength","process","postMessage","useEffect","console","log","onmessage","evt","data","terminate","onSelectedFile","item","a","file","target","files","URL","createObjectURL","reader","FileReader","onload","buffer","this","result","array","Uint8Array","readAsArrayBuffer","Container","container","xs","src","imageStyle","objectFit","Box","display","justifyContent","alignItems","height","CircularProgress","srcDoc","title","width","scrolling","style","border","overflow","p","Input","onChange","Typography","Slider","value","_","v","onChangeCommitted","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81794b70.chunk.js","sourcesContent":["import {\n  Box,\n  CircularProgress,\n  Container,\n  Input,\n  Slider,\n  Typography,\n} from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid/Grid\";\nimport { ChangeEventHandler, useEffect, useState } from \"react\";\nimport Image from \"material-ui-image\";\n\nconst worker = new Worker(\"./worker.js\", { type: \"module\" });\nfunction App() {\n  const [imgArr, setImgArr] = useState<Uint8Array>();\n  const [imageFileUrl, setImageFileUrl] = useState<string>();\n  const [html, setHtml] = useState<string>();\n  const [loading, setLoading] = useState(false);\n  const [colorDiff, setColorDiff] = useState(40);\n  const [minLineLength, setMinLineLength] = useState(10);\n\n  useEffect(() => {\n    console.log(\"start\");\n\n    worker.onmessage = (evt) => {\n      setHtml(evt.data);\n      setLoading(false);\n    };\n    return () => worker.terminate();\n  }, []);\n\n  function process() {\n    setLoading(true)\n    worker.postMessage({ imgArr, colorDiff, minLineLength });\n  }\n\n  const onSelectedFile: ChangeEventHandler<HTMLInputElement> = async (item) => {\n    const file = item.target.files?.[0];\n    if (file) {\n      setImageFileUrl(URL.createObjectURL(file));\n      const reader = new FileReader();\n      reader.onload = async function () {\n        const buffer = this.result as ArrayBuffer;\n        const array = new Uint8Array(buffer);\n        setImgArr(array);\n        worker.postMessage({ imgArr: array, colorDiff, minLineLength });\n        setLoading(true);\n      };\n      reader.readAsArrayBuffer(file);\n    }\n  };\n\n  return (\n    <Container>\n      <Grid container>\n        <Grid item xs={6}>\n          {imageFileUrl && (\n            <Image src={imageFileUrl} imageStyle={{ objectFit: \"contain\" }} />\n          )}\n        </Grid>\n        <Grid item xs={6}>\n          <Box\n            display={\"flex\"}\n            justifyContent={\"center\"}\n            alignItems={\"center\"}\n            height={\"100%\"}\n          >\n            {loading ? (\n              <CircularProgress />\n            ) : (\n              <iframe\n                srcDoc={html}\n                title=\"image\"\n                width={\"100%\"}\n                height={\"100%\"}\n                scrolling=\"no\"\n                style={{ border: \"none\", overflow: \"clip\" }}\n              />\n            )}\n          </Box>\n        </Grid>\n      </Grid>\n      <Grid container justifyContent={\"center\"}>\n        <Grid item xs={4}>\n          <Box p={1}>\n            <Input type={\"file\"} onChange={onSelectedFile} />\n          </Box>\n          <Box p={1}>\n            <Typography>Color Difference: {colorDiff}</Typography>\n            <Slider\n              value={colorDiff}\n              onChange={(_, v) => setColorDiff(v as number)}\n              onChangeCommitted={process}\n            />\n          </Box>\n          <Box p={1}>\n            <Typography>\n              Minimal Polygon Line Length (px): {minLineLength}\n            </Typography>\n            <Slider\n              value={minLineLength}\n              onChange={(_, v) => setMinLineLength(v as number)}\n              onChangeCommitted={process}\n            />\n          </Box>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}